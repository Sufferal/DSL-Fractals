# Generated from grammar_fractals.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,232,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,5,27,205,8,27,10,27,
        12,27,208,9,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,37,
        0,0,38,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
        69,35,71,36,73,37,75,38,1,0,4,2,0,34,34,92,92,1,0,48,57,2,0,65,90,
        97,122,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,116,
        233,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,82,1,0,0,0,
        5,88,1,0,0,0,7,94,1,0,0,0,9,105,1,0,0,0,11,111,1,0,0,0,13,116,1,
        0,0,0,15,122,1,0,0,0,17,129,1,0,0,0,19,136,1,0,0,0,21,138,1,0,0,
        0,23,140,1,0,0,0,25,145,1,0,0,0,27,150,1,0,0,0,29,157,1,0,0,0,31,
        164,1,0,0,0,33,173,1,0,0,0,35,181,1,0,0,0,37,183,1,0,0,0,39,185,
        1,0,0,0,41,187,1,0,0,0,43,189,1,0,0,0,45,191,1,0,0,0,47,193,1,0,
        0,0,49,195,1,0,0,0,51,197,1,0,0,0,53,199,1,0,0,0,55,201,1,0,0,0,
        57,211,1,0,0,0,59,213,1,0,0,0,61,215,1,0,0,0,63,217,1,0,0,0,65,219,
        1,0,0,0,67,221,1,0,0,0,69,223,1,0,0,0,71,225,1,0,0,0,73,227,1,0,
        0,0,75,229,1,0,0,0,77,78,5,115,0,0,78,79,5,105,0,0,79,80,5,122,0,
        0,80,81,5,101,0,0,81,2,1,0,0,0,82,83,5,99,0,0,83,84,5,111,0,0,84,
        85,5,108,0,0,85,86,5,111,0,0,86,87,5,114,0,0,87,4,1,0,0,0,88,89,
        5,97,0,0,89,90,5,110,0,0,90,91,5,103,0,0,91,92,5,108,0,0,92,93,5,
        101,0,0,93,6,1,0,0,0,94,95,5,105,0,0,95,96,5,116,0,0,96,97,5,101,
        0,0,97,98,5,114,0,0,98,99,5,97,0,0,99,100,5,116,0,0,100,101,5,105,
        0,0,101,102,5,111,0,0,102,103,5,110,0,0,103,104,5,115,0,0,104,8,
        1,0,0,0,105,106,5,115,0,0,106,107,5,104,0,0,107,108,5,97,0,0,108,
        109,5,112,0,0,109,110,5,101,0,0,110,10,1,0,0,0,111,112,5,109,0,0,
        112,113,5,111,0,0,113,114,5,118,0,0,114,115,5,101,0,0,115,12,1,0,
        0,0,116,117,5,115,0,0,117,118,5,99,0,0,118,119,5,97,0,0,119,120,
        5,108,0,0,120,121,5,101,0,0,121,14,1,0,0,0,122,123,5,114,0,0,123,
        124,5,111,0,0,124,125,5,116,0,0,125,126,5,97,0,0,126,127,5,116,0,
        0,127,128,5,101,0,0,128,16,1,0,0,0,129,130,5,109,0,0,130,131,5,105,
        0,0,131,132,5,114,0,0,132,133,5,114,0,0,133,134,5,111,0,0,134,135,
        5,114,0,0,135,18,1,0,0,0,136,137,5,120,0,0,137,20,1,0,0,0,138,139,
        5,121,0,0,139,22,1,0,0,0,140,141,5,100,0,0,141,142,5,114,0,0,142,
        143,5,97,0,0,143,144,5,119,0,0,144,24,1,0,0,0,145,146,5,115,0,0,
        146,147,5,97,0,0,147,148,5,118,0,0,148,149,5,101,0,0,149,26,1,0,
        0,0,150,151,5,99,0,0,151,152,5,105,0,0,152,153,5,114,0,0,153,154,
        5,99,0,0,154,155,5,108,0,0,155,156,5,101,0,0,156,28,1,0,0,0,157,
        158,5,115,0,0,158,159,5,113,0,0,159,160,5,117,0,0,160,161,5,97,0,
        0,161,162,5,114,0,0,162,163,5,101,0,0,163,30,1,0,0,0,164,165,5,116,
        0,0,165,166,5,114,0,0,166,167,5,105,0,0,167,168,5,97,0,0,168,169,
        5,110,0,0,169,170,5,103,0,0,170,171,5,108,0,0,171,172,5,101,0,0,
        172,32,1,0,0,0,173,174,5,112,0,0,174,175,5,111,0,0,175,176,5,108,
        0,0,176,177,5,121,0,0,177,178,5,103,0,0,178,179,5,111,0,0,179,180,
        5,110,0,0,180,34,1,0,0,0,181,182,5,48,0,0,182,36,1,0,0,0,183,184,
        5,49,0,0,184,38,1,0,0,0,185,186,5,50,0,0,186,40,1,0,0,0,187,188,
        5,51,0,0,188,42,1,0,0,0,189,190,5,52,0,0,190,44,1,0,0,0,191,192,
        5,53,0,0,192,46,1,0,0,0,193,194,5,54,0,0,194,48,1,0,0,0,195,196,
        5,55,0,0,196,50,1,0,0,0,197,198,5,56,0,0,198,52,1,0,0,0,199,200,
        5,57,0,0,200,54,1,0,0,0,201,206,5,34,0,0,202,205,3,75,37,0,203,205,
        8,0,0,0,204,202,1,0,0,0,204,203,1,0,0,0,205,208,1,0,0,0,206,204,
        1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,206,1,0,0,0,209,210,
        5,34,0,0,210,56,1,0,0,0,211,212,7,1,0,0,212,58,1,0,0,0,213,214,7,
        2,0,0,214,60,1,0,0,0,215,216,5,61,0,0,216,62,1,0,0,0,217,218,5,46,
        0,0,218,64,1,0,0,0,219,220,5,44,0,0,220,66,1,0,0,0,221,222,5,91,
        0,0,222,68,1,0,0,0,223,224,5,93,0,0,224,70,1,0,0,0,225,226,5,32,
        0,0,226,72,1,0,0,0,227,228,5,95,0,0,228,74,1,0,0,0,229,230,5,92,
        0,0,230,231,7,3,0,0,231,76,1,0,0,0,3,0,204,206,0
    ]

class grammar_fractalsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    STRING = 28
    DIGIT = 29
    LETTER = 30
    EQ = 31
    DOT = 32
    COMMA = 33
    LBRACK = 34
    RBRACK = 35
    SPACE = 36
    UNDERSCORE = 37
    ESC = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'size'", "'color'", "'angle'", "'iterations'", "'shape'", "'move'", 
            "'scale'", "'rotate'", "'mirror'", "'x'", "'y'", "'draw'", "'save'", 
            "'circle'", "'square'", "'triangle'", "'polygon'", "'0'", "'1'", 
            "'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "'='", 
            "'.'", "','", "'['", "']'", "' '", "'_'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "DIGIT", "LETTER", "EQ", "DOT", "COMMA", "LBRACK", 
            "RBRACK", "SPACE", "UNDERSCORE", "ESC" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "STRING", "DIGIT", "LETTER", "EQ", "DOT", "COMMA", 
                  "LBRACK", "RBRACK", "SPACE", "UNDERSCORE", "ESC" ]

    grammarFileName = "grammar_fractals.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


